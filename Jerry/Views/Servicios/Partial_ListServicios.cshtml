@using Jerry.Models
@model IEnumerable<Jerry.Models.Servicio>

@{
    bool selectMode = ViewData["selectMode"] != null ? (bool)ViewData["selectMode"] : false;
    bool showOptions = ViewData["showOptions"] != null ? (bool)ViewData["showOptions"] : true;
    bool detailsMode = ViewData["detailsMode"] != null ? (bool)ViewData["detailsMode"] : false;
    string externalFunction = ViewData["externalFunction"] != null ? (string)ViewData["externalFunction"] : string.Empty;
    Evento evento = ViewData["evento"] != null ? (Evento)ViewData["evento"] : new Evento();

    @*Variables para editar la lista de productos comprados*@
    bool editMode = false;
    bool found = false;
    List<ServiciosEnReservacion> servicios = null;
    ServiciosEnReservacion itemIndex = null;
    if (ViewData["serviciosSeleccionados"] != null)
    {
        servicios = (List<ServiciosEnReservacion>)ViewData["serviciosSeleccionados"];
        editMode = servicios != null && servicios.Count() > 0;
    }
}
@if (Model != null && Model.Count() > 0)
{
<table id="tblServicios" class="table table-striped table-hover">
    <thead>
        <tr>
            @if (selectMode)
            {
                <th></th>
            }

            @if (selectMode || detailsMode)
            {
                <th width="1em">
                    Cantidad
                </th>
            }
            <th class="hidden">
                @Html.DisplayNameFor(model => model.serviciosID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.nombre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.costo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.descripcion)
            </th>
            @if (!selectMode && showOptions)
            {
                <th></th>
            }
        </tr>
    </thead>
    <tbody>
            @foreach (var item in Model)
            {
                if (editMode || detailsMode)
                {
                    itemIndex = servicios.FirstOrDefault(serv => serv.serviciosID == item.serviciosID);
                    found = itemIndex != null;
                }

                <tr item-id="@(item.serviciosID)" @(found ? "default-selected" : "")>
                    @if (selectMode)
                    {
                        <td></td>
                    }
                    @if (selectMode || detailsMode)
                    {
                        <td width="1em">
                            <input type="number" item-id="@(item.serviciosID)"
                                   id="producto@(item.serviciosID)" min="0"
                                   oninput="editarElemento(this)" class="form-control inputCantidad"
                                   value="@(editMode && found?itemIndex.cantidad:0)" 
                                   @(detailsMode?"disabled":"")
                                   />
                        </td>
                    }
                    <td class="hidden">
                        @Html.DisplayFor(modelItem => item.serviciosID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.nombre)
                    </td>
                    <td>
                        @if (!selectMode)
                        {
                            @*Html.DisplayFor(modelItem => item.costo)*@
                            @(found ? itemIndex.costo.ToString("C") : item.costo.ToString("C"))
                        }
                        else
                        {
                            <input class="form-control inputCosto" 
                                   data-mask="###0.00" data-mask-reverse="true" 
                                   id="item_costo" item-id="@(item.serviciosID)" name="costo@(item.serviciosID)"
                                   onkeyup="editarElemento(this)" value="@(editMode && found?itemIndex.costo:item.costo)">
                       }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.descripcion)
                    </td>
                    @if (!selectMode && showOptions)
                    {
                        <td>
                            <a href="@Url.Action("Delete","Servicio", new { id = item.serviciosID })">
                                <i class="fa fa-remove"></i><span>Eliminar</span>
                            </a>
                        </td>
                    }
                </tr>
            }
    </tbody>
</table>
}
else
{
    <div class="alert alert-warning">
        No hay servicios @(selectMode ? "seleccionados" : "registrados").
    </div>
}

<script>
    /*Funciones y varialbes propias de la implementacion*/
    var totalPorServicios = @(evento.totalPorServicios);
    var editMode = @(editMode?"true":"false");
    var loadingToEdit = editMode;

    function selectForEdition() {
        $("#tblServicios").DataTable().table().rows('[default-selected]').select();
    }

    /*Funciones y variables de seleccion de elementos*/
    var table;
    var COLS_ENUM = Object.freeze({ CANTIDAD:1, ID: 2, COSTO: 4})
    var elementosSeleccionados = new Array();
    function inicializarSeleccionTablaServicios(){
        table = $("#tblServicios").DataTable({
            paging:false,
            columnDefs: [{
                orderable: false,
                className: 'select-checkbox',
                targets: 0
            }],
            select: {
                style: 'multiselect',
                selector: 'td:first-child'
            },
            selected: {},
            order: [[2, 'asc']]
        });
        table.on('select', function (e, dt, type, indexes) {
            if(dt){
                var selRow = dt.data()
                agregarSeleccion(selRow)
                @(String.IsNullOrEmpty(externalFunction)? "":externalFunction+ "(elementosSeleccionados)")
            }
        }).on('deselect', function (e, dt, type, indexes) {
            var unSelRows = dt.data();
            removerSeleccion(unSelRows);
            @(String.IsNullOrEmpty(externalFunction)? "":externalFunction+ "(elementosSeleccionados)")
        });
    }

    //Metodo que agrega al estado de elementos seleccionados un nuevo elemento
    function agregarSeleccion(rows) {
        var renglones = new Array();
        if (!rows.rows) { //Si es un solo elemento
            var inputCantidad = $('input[item-id=' + rows[COLS_ENUM.ID] + ']');
            introducirNuevaCantidad(inputCantidad[0]);
        } else { //Si son varios
            renglones = rows;
            $.each(renglones, function (idx, row) {
                var inputCantidad = $('input[item-id=' + row[COLS_ENUM.ID] + ']');
                introducirNuevaCantidad(inputCantidad[0]);
            })
        }
    }

    //Metodo que elimina del estado de elementos seleccionados un elemento determinado
    //dentro de los argumentos
    function removerSeleccion(rows) {
        var renglonesAEliminar = new Array();
        if (!rows.rows) {
            renglonesAEliminar.push(rows);
        } else {
            renglonesAEliminar = rows;
        }
        $.each(renglonesAEliminar, function (idx, row) {
            elementosSeleccionados = $.grep(elementosSeleccionados, function (item, idx) {
                return item.serviciosID == row[COLS_ENUM.ID] //ID del elemento donde se esta implementando
            }, true)
        })
    }

    function introducirNuevaCantidad(inputCantidad) {
        var selRow = buscarRenglonSeleccionado(inputCantidad)
        //Se el input editado se encontraba seleccionado
        if (selRow)
            introducirNuevoDato(selRow, inputCantidad)
    }

    //Inserta en el arreglo global de elementos seleccionados un nuevo elemento dado el dato seleccionado
    function introducirNuevoDato(dato, inputCantidad) {
        var item_id = $(inputCantidad).attr('item-id');
        var trRow = $("#tblServicios tr[item-id="+item_id+"]");

        /*var cantidad = inputCantidad ? inputCantidad.valueAsNumber : Number($(dato[COLS_ENUM.CANTIDAD]).val());
        var costo = inputCantidad ? inputCantidad.valueAsNumber : Number($(dato[COLS_ENUM.CANTIDAD]).val());*/
        var cantidad = currencyToNumber(trRow.find('td input.inputCantidad').val());
        var costo =  currencyToNumber(trRow.find('td input.inputCosto').val());
        /*
        elementosSeleccionados[itemIDX].cantidad = currencyToNumber(trRow.find('td input.inputCantidad').val());
        elementosSeleccionados[itemIDX].costo = currencyToNumber(trRow.find('td input.inputCosto').val());*/

        elementosSeleccionados.push({
            serviciosID: dato[COLS_ENUM.ID],
            //costo: currencyToNumber(dato[COLS_ENUM.COSTO]),
            costo: costo,
            cantidad: cantidad,
        })
    }

    //Dado el DOM de un input, Arroja un renglon del datatable que le corresponde.
    function buscarRenglonSeleccionado(input) {
        //Se toman los datos de los renglones seleccionados
        var selectedRows = table.rows({ selected: true });
        var data = selectedRows.data()

        //Se busca si el input editado se encuentra seleccionado
        var selRow = $.grep(data, function (item, idx) {
            return item[COLS_ENUM.ID] == $(input).attr('item-id');
        })[0];

        return selRow;
    }

    function editarElemento(inputEditado) {
        var selRow = buscarRenglonSeleccionado(inputEditado);
        var trRow = $(inputEditado).closest('tr');
        if (selRow) {
            var itemIDX
            $.each(elementosSeleccionados, function (idx, item) {
                if (selRow[COLS_ENUM.ID] == item.serviciosID)
                    itemIDX = idx;
            })
            elementosSeleccionados[itemIDX].cantidad = currencyToNumber(trRow.find('td input.inputCantidad').val());
            elementosSeleccionados[itemIDX].costo = currencyToNumber(trRow.find('td input.inputCosto').val());
        }
        @(String.IsNullOrEmpty(externalFunction)? "":externalFunction+ "(elementosSeleccionados)")
    }
</script>