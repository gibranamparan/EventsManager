@using Jerry.Models
@using Jerry.Models
@using Jerry.GeneralTools
@model Jerry.Models.Banquete
@{
    bool failPostBack = ViewBag.failPostBack == null ? false : ViewBag.failPostBack;
    bool editMode = Model.eventoID > 0;
    string externalFunction = "externalFunction";
    ViewBag.Title = (editMode ? "Editar" : "Registrar") + " Reservación de Banquete";
    Layout = "~/Views/Shared/_Layout.cshtml";

    //Y la primera sesion es mañana
    if (!editMode) {
        Model.fechaEventoInicial = DateTime.Today.AddDays(1);
        Model.fechaEventoFinal = Model.fechaEventoInicial;
    }

    List<Servicio> servicios = ViewBag.servicios;
    List<ServiciosEnReservacion> serviciosSeleccionados = new List<ServiciosEnReservacion>();
    decimal costoTotalPorServicios = 0;
    decimal costoTotal = 0;
    if (editMode || failPostBack)
    {
        serviciosSeleccionados = Model.serviciosContratados != null
            ? Model.serviciosContratados.ToList() : serviciosSeleccionados;
        costoTotalPorServicios = Model.costoTotalPorServicios;
        costoTotal = Model.costo;
    }

    //Configuracion del modal que notifica los conflictos
    VMConfirmModalAttributes vmModalConflictos = new VMConfirmModalAttributes
    {
        modalID = "modalConflictos",
        partialViewURL = "../Banquetes/Partial_EventosConflictivos",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.INFO),
        modalTitle = "Reservaciones que Presentan Conflicto.",
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.LARGE),
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modelForPartial = new List<Banquete.VMBanquete>()
    };
}

@*Modal para mostrar conflictos*@
@Html.Partial("Partial_ConfirmationModal", vmModalConflictos)

@*Navegacino para salir de la pantalla actual*@
<nav>
    <a href="@Url.Action("Details","Clientes",new { id = Model.clienteID })">
        <i class="fa fa-arrow-left"></i><span>Volver al historial del cliente</span>
    </a><span>|</span>
    <a href="@Url.Action("Details","Eventos",new { id = Model.eventoID })">
        <i class="fa fa-credit-card"></i><span>Informacion y Pagos de Reservación</span>
    </a>
</nav>

@*Panel de detalles del cliente seleccionado*@
@Html.Partial("../Clientes/Partial_ClienteDetailsSummary", Model.cliente)

@using (Html.BeginForm(null, "Banquetes", FormMethod.Post, new { id = "formBanquetes" }))
{
    @Html.AntiForgeryToken()
    <div class="panel panel-primary">
        <div class="panel-heading">
            @ViewBag.Title
        </div>
        <div class="panel-body">
            <div class="col-md-12">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @if (editMode || failPostBack)
                {
                    @Html.HiddenFor(model => model.eventoID)
                    @Html.HiddenFor(model => model.fechaReservacion)
                }
                @Html.HiddenFor(model => model.costo)
                @Html.HiddenFor(model => model.clienteID)
                @Html.Hidden("listServiciosSeleccionados")

                <div id="alertConflicto" class="alert alert-danger" style="display:none">
                    Los horarios estan presentando conflicto con otras reservaciones ya registradas, verifique las reservaciones con conflicto haciendo
                    click en el siguiente <a href="#" data-toggle="modal" data-target="#@(vmModalConflictos.modalID)">enlace</a>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fechaEventoInicial)
                        <input class="form-control" id="fechaEventoInicial" name="fechaEventoInicial"
                               value='@Model.fechaEventoInicial.ToString("yyyy/MM/dd HH:mm")'
                               onchange="ajustarFechas(this);prepararDatosJSON();" datetimepicker />
                        @Html.ValidationMessageFor(model => model.fechaEventoInicial, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fechaEventoFinal)
                        <input class = "form-control" id="fechaEventoFinal" name="fechaEventoFinal"
                                value='@Model.fechaEventoFinal.ToString("yyyy/MM/dd HH:mm")' 
                                onchange = "ajustarFechas(this);prepararDatosJSON();" datetimepicker />
                        @Html.ValidationMessageFor(model => model.fechaEventoFinal, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.costoPorReservacion)
                        @Html.EditorFor(model => model.costoPorReservacion, new {
                           htmlAttributes = new {
                               @class = "form-control",
                               data_mask = "0000000000.00",
                               data_mask_reverse = "true",
                               onkeyup = "recalcularMontoTotal($('#totalPorServicios').val())"
                           }
                   })
                        @Html.ValidationMessageFor(model => model.costoPorReservacion, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.TipoContrato)
                        @Html.DropDownList("TipoContrato", Banquete.getTipoContratoSelectList(), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TipoContrato, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.CantidadPersonas)
                        @Html.EditorFor(model => model.CantidadPersonas, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CantidadPersonas, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-8">
                        @Html.LabelFor(model => model.platillo)
                        @Html.EditorFor(model => model.platillo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.platillo, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.numTiemposPlatillo)
                        @Html.EditorFor(model => model.numTiemposPlatillo, new { htmlAttributes = new { @class = "form-control", max=3, min = 1 } })
                        @Html.ValidationMessageFor(model => model.numTiemposPlatillo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.totalPorServicios, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.totalPorServicios, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           data_mask = "###0.00",
                           data_mask_reverse = "true",
                           onkeyup = "recalcularMontoTotal($(this).val())"
                       }
                   })
                        @Html.ValidationMessageFor(model => model.totalPorServicios, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.costo, htmlAttributes: new { @class = "control-label" })
                        <input id="costoTotal" name="costoTotal" class="form-control"
                               value="@(costoTotal)" readonly />
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.lugar)
                        @Html.EditorFor(model => model.lugar, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.lugar, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.Detalles, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Detalles, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Detalles, "", new { @class = "text-danger" })
                    </div>
                </div>
                @{ 
                    ViewDataDictionary vdd = new ViewDataDictionary();
                    vdd.Add("selectMode", true);
                    vdd.Add("externalFunction", externalFunction);
                    if (editMode || failPostBack)
                    {
                        vdd.Add("serviciosSeleccionados", Model.serviciosContratados.ToList());
                    }
                }
                @Html.Partial("../Servicios/Partial_ListServicios", servicios, vdd)
                <br />
                <div class="form-group">
                    <button id="btnReservar" class="btn btn-success">@(editMode?"Guardar":"Registrar")</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts{
    <script>
        inicializarSeleccionTablaServicios()
        initPartialConflictos()

        function recalcularMontoTotal(total) {
            var totalPorServicios = currencyToNumber(total)
            var costoPorReservacion = currencyToNumber($("#costoPorReservacion").val())
            var costoTotal = costoPorReservacion + totalPorServicios;
            $("#totalPorServicios").val(numeral(totalPorServicios).format("0.00")).trigger('input')
            $("#costoTotal").val(numberToCurrency(costoTotal))
            $("#costo").attr('value', costoTotal)
        }

        //Verifica y ajusta las fechas de cada sesion para ser válidas
        function ajustarFechas(inputFecha) {
            //Se parsean las fechas introducidas dentro del panel modificado
            var inputStartDate = $('#fechaEventoInicial');
            var inputEndDate = $('#fechaEventoFinal');
            var dtStartDate = strToDateTime(inputStartDate.val())
            var dtEndDate = strToDateTime(inputEndDate.val())
            //Si la fecha inicial es mayor a la final
            if (dtStartDate > dtEndDate) {
                dtEndDate = new Date(dtStartDate.getTime()) //Se iguala la inicial con la menor
                dtEndDate.setHours(dtEndDate.getHours() + 1);
                //Se modificar el datetimepicker de cada input
                strStartDate = dateTimeToDateTimePickerFormat(dtStartDate)
                strEndDate = dateTimeToDateTimePickerFormat(dtEndDate)
                inputStartDate.datetimepicker({ value: strStartDate })
                inputEndDate.datetimepicker({ value: strEndDate })
            }
        }

        function @(externalFunction)(elementosSeleccionados){
            $('#listServiciosSeleccionados').val(JSON.stringify(elementosSeleccionados))
            var total = 0;
            $.each(elementosSeleccionados, function (idx, item) {
                total += item.costo * item.cantidad //Propiedad de costo es cambiable
            })
            //$("#listServiciosSeleccionados").val(JSON.stringify(elementos));
            recalcularMontoTotal(total)
        }
        
        var reservacion = {
            eventoID:@(Model.eventoID),
            fechaEventoInicial:'',
            fechaEventoFinal:''
        };
        function prepararDatosJSON(){
            reservacion.fechaEventoInicial = $('#fechaEventoInicial').val();
            reservacion.fechaEventoFinal = $('#fechaEventoFinal').val();
            checarConflictos()
        }
        function enableAndNotify(doDisable) {
            $('#btnReservar').prop('disabled',doDisable)
        }
        function checarConflictos() {
            var token = $('#formReservacion').find("input[name=__RequestVerificationToken]").val()
            $.postJSON("/Banquetes/checarConflictos", reservacion, "json",
                function (res) {//Success
                    console.log("Conflictos",res);
                    $('#alertConflicto').slideDownOrUp(res.length)
                    if (res.length) {
                        renderData(res);
                    }
                    enableAndNotify(res.length)
                }, function (error) {//Fail
                    alert(error)
                    console.log(error)
                }, function () {//Always

                }, token)
        }
    </script>
    @if (editMode || failPostBack)
    {
        <script>
            selectForEdition();
        </script>
    }
}