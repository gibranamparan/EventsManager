@using Jerry.Models
@using Jerry.GeneralTools
@model Jerry.Models.Reservacion
@{
    bool failPostBack = ViewBag.failPostBack == null ? false : ViewBag.failPostBack;
    bool editMode = Model.eventoID > 0;
    ViewBag.Title = (editMode ? "Editar" : "Registrar") + " Reservación";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<Servicio> servicios = ViewBag.servicios;
    List<SesionDeReservacion> sesiones = new List<SesionDeReservacion>();
    sesiones = Model.sesiones != null ? Model.sesiones.ToList() : sesiones;
    //Si no hay sesiones asociadas a la vista del registro, se crea una por defecto
    //como base para la forma
    if (sesiones == null || sesiones.Count() == 0)
    {
        SesionDeReservacion primeraSesion = new SesionDeReservacion();
        //Y la primera sesion es mañana
        primeraSesion.periodoDeSesion.startDate = DateTime.Today.AddDays(1);
        primeraSesion.periodoDeSesion.endDate = primeraSesion.periodoDeSesion.startDate;
        //Siempre por defecto habra al menos una sesion
        sesiones.Add(primeraSesion);
    }

    List<ServiciosEnReservacion> serviciosSeleccionados = new List<ServiciosEnReservacion>();
    decimal costoTotalPorServicios = 0;
    decimal costoTotal = 0;
    SelectList salones = ViewBag.salonID;
    if (editMode || failPostBack) //Al editar registro o al haber un error al tratar de crearlo
    {
        //Se toman los servicios seleccionados en el registro y se calculan los costos asociados
        serviciosSeleccionados = Model.serviciosContratados!=null?Model.serviciosContratados.ToList():serviciosSeleccionados;
        costoTotalPorServicios = Model.costoTotalPorServicios;
        costoTotal = Model.costo;
    }
    else //Al crear un nuevo registro
    {
        @*Para pruebas*@
        if(!(editMode || failPostBack)) {
            Model.Detalles = "ESTA ES SOLO UNA DESCRIPCIOND E PRUEBA";
            Model.CantidadPersonas = 15;
        }
    }

    //Configuracion del modal que notifica los conflictos
    VMConfirmModalAttributes vmModalConflictos = new VMConfirmModalAttributes
    {
        modalID = "modalConflictos",
        partialViewURL = "../Reservacion/Partial_ReservacionesConflictivas",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.INFO),
        modalTitle = "Reservaciones que Presentan Conflicto.",
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.LARGE),
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modelForPartial = new Reservacion.VMReservacion(new Reservacion())
    };

}

@Html.Partial("Partial_ConfirmationModal", vmModalConflictos)

<p>
    <a href="@Url.Action("Details","Clientes",new { id = Model.clienteID })">
        <i class="fa fa-arrow-left"></i><span>Volver al historial del cliente</span>
    </a><span>|</span>
    <a href="@Url.Action("Details","Eventos",new { id = Model.eventoID })">
        <i class="fa fa-credit-card"></i><span>Informacion de Reservación</span>
    </a>
</p>

@Html.Partial("../Clientes/Partial_ClienteDetailsSummary",Model.cliente)

@using (Html.BeginForm(null, "Reservacion", FormMethod.Post,new { id = "formReservacion"}))
{
    @Html.AntiForgeryToken()

    <div class="panel panel-primary">
        <div class="panel-heading" onclick="changeIcon(this)"
             data-toggle="collapse" data-target="#reservasTable">
            <span class="panel-title">
                @ViewBag.Title
            </span>
            <i class="pull-right fa fa-window-minimize"></i>
        </div>
        <div class="panel-body" id="reservasTable">
            @*Forma de creacion de nueva reservacion*@
            <div class="col-md-12">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.clienteID)
                @Html.HiddenFor(model => model.fechaReservacion)
                @Html.HiddenFor(model => model.eventoID)
                @Html.HiddenFor(model => model.costo)
                @Html.Hidden("listServiciosSeleccionados")
                @Html.Hidden("listSesiones")

                <div id="alertConflicto" class="alert alert-danger" style="display:none">
                    Los horarios estan presentando conflicto con otras reservaciones ya registradas, verifique las reservaciones con conflicto haciendo
                    click en el siguiente <a href="#" data-toggle="modal" data-target="#@(vmModalConflictos.modalID)">enlace</a>
                </div>

                @*PANEL PARA AGREGAR SESIONES DENTRO DE LA RESERVACION*@
                <div class="row">
                    <fieldset>
                        <legend style="padding-bottom: .5em;">
                            <span>Sesiones</span>
                            <span class="pull-right" style="margin-bottom: .5em">
                                <button class="btn btn-primary" type="button" onclick="agregarSesion()">
                                    <i class="fa fa-plus"></i><span>Agregar Sesión</span>
                                </button>
                            </span>
                        </legend>
                        <div id="divSesiones">
                            @{
                                int cont = 1;
                                foreach (var sesion in sesiones)
                                {
                                    <div class="divSesion col-md-12">
                                        <div class="panel panel-info">
                                            <div class="panel-heading">
                                                <h3 class="panel-title">
                                                    <span>Sesión #</span><span id="spanNum">@cont</span>
                                                    @if((editMode|| failPostBack) && cont > 1) { // Se muestra boton de eliminacion para editar registros adicioanles a la sesion por defecto
                                                        <i class="fa fa-remove pull-right btnRemover" onclick="removerSesion(this)"></i>
                                                    }
                                                </h3>
                                            </div>
                                            <div class="panel-body">
                                                <div class="form-group col-md-4">
                                                    @Html.LabelFor(model => sesion.periodoDeSesion.startDate)
                                                    <input class = "form-control" id="sesion_periodoDeSesion_startDate" name="sesion.periodoDeSesion.startDate"
                                                           value='@sesion.periodoDeSesion.startDate.ToString("yyyy/MM/dd HH:mm")' 
                                                           onchange = "ajustarFechas(this);prepararDatosJSON($('.divSesion'))" datetimepicker />
                                                </div>
                                                <div class="form-group col-md-4">
                                                    @Html.LabelFor(model => sesion.periodoDeSesion.endDate)
                                                    <input class = "form-control" id="sesion_periodoDeSesion_endDate" name="sesion.periodoDeSesion.endDate"
                                                           value='@sesion.periodoDeSesion.endDate.ToString("yyyy/MM/dd HH:mm")' 
                                                           onchange = "ajustarFechas(this);prepararDatosJSON($('.divSesion'))" datetimepicker />
                                                </div>
                                                <div class="form-group col-md-4">
                                                    @Html.LabelFor(model => sesion.salonID)
                                                    @if (!(editMode|| failPostBack))
                                                    {
                                                        @Html.DropDownList("salonID", null, new
                                                        {
                                                            @class = "form-control",
                                                            onchange = "prepararDatosJSON($('.divSesion'))"
                                                        })
                                                    }
                                                    else
                                                    {
                                                        @Html.DropDownListFor(model=>sesion.salonID,
                                                            new SelectList(salones.Items,"salonID","nombre",sesion.salonID), new
                                                            {
                                                                @class = "form-control",
                                                                onchange = "prepararDatosJSON($('.divSesion'))"
                                                            })
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    cont++;
                                }
                             }
                        </div>
                    </fieldset>
                </div>

                <div class="row">
                    <fieldset>
                        <legend>Información General</legend>
                        <div class="form-group col-md-4">
                            @*<label for="costoPorReservacion">Costo Por Reservacion</label>
                            <input id="costoPorReservacion" name="costoPorReservacion" onkeyup="recalcularMontoTotal()"
                                   class="form-control" value="@(costoTotal - costoTotalPorServicios)" data-mask="###0.00" data-mask-reverse="true" />*@

                            @Html.LabelFor(model => model.costoPorReservacion, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.costoPorReservacion, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control",
                                       data_mask = "###0.00",
                                       data_mask_reverse = "true",
                                       onkeyup = "recalcularMontoTotal()"
                                   }
                               })

                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(model => model.TipoContrato)
                            @Html.DropDownList("TipoContrato", Reservacion.getTipoContratoSelectList(), htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TipoContrato, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(model => model.CantidadPersonas)
                            @Html.EditorFor(model => model.CantidadPersonas, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control",
                                       min = 0
                                   }
                               })
                            @Html.ValidationMessageFor(model => model.CantidadPersonas, "", new { @class = "text-danger" })
                        </div>
                    </fieldset>
                </div>
                <div class="row">
                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.Detalles, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Detalles, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Detalles, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.totalPorServicios, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.totalPorServicios, new { htmlAttributes = new {
                       @class = "form-control",data_mask="###0.00", data_mask_reverse = "true", onkeyup= "recalcularMontoTotal()"
                   } })
                        @Html.ValidationMessageFor(model => model.totalPorServicios, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.costo, htmlAttributes: new { @class = "control-label" })
                        <input id="costoTotal" name="costoTotal" class="form-control" 
                               value="@(costoTotal)" readonly />
                    </div>
                </div>
                @{
                    ViewDataDictionary vdd = new ViewDataDictionary();
                    vdd.Add("selectMode", true);
                    vdd.Add("externalFunction", "recalcularTotales");
                    if (editMode || failPostBack)
                    {
                        vdd.Add("serviciosSeleccionados", Model.serviciosContratados.ToList());
                    }
                }
                @Html.Partial("../Servicios/Partial_ListServicios", servicios, vdd)
                <br />
                <div class="form-group">
                    <button id="btnReservar" class="btn btn-success">@(editMode ? "Guardar" : "Reservar")</button>
                </div>
            </div>

        </div>
    </div>
}

@section Scripts{
<script>
    inicializarSeleccionTablaServicios()
    function recalcularMontoTotal() {
        var totalPorServicios = currencyToNumber($("#totalPorServicios").val())
        var costoPorReservacion = currencyToNumber($("#costoPorReservacion").val())
        var costoTotal = costoPorReservacion + totalPorServicios;
        $("#costoTotal").val(numberToCurrency(costoTotal))
        $("#costo").attr('value', costoTotal)
    }

    @*CONTROL DE PANEL DE SESIONES DENTRO DE LA RESERVACION*@
    var sesiones = new Array();
    var hayConflictos = false;
    //Se introduce a los datos de sesiones al menos una sesion por defecto
    prepararDatosJSON($('.divSesion'))

    //Funcion para agregar al GUI un nuevo control de sesion, ademas reenumera los paneles y actualiza el estado de datos
    function agregarSesion() {
        var divsSesiones = $('.divSesion'); //Se toman todas las sesiones agregadas
        var newDivSesion = divsSesiones.last().clone(); //Se clona el layout de la sesion  
        //Se habilita datetimepicker para los inputs dentro del div de sesion
        $.each(newDivSesion.find("[type=datetime]"), function (idx, item) {
            $(item).attr('type', 'datetime')
            $(item).datetimepicker({ lang: 'es', mask: true, value: item.value });
        })

        if(!newDivSesion.find('i.btnRemover').length){ //Solo se agrega si no hay boton para cerrar en panel base
            var btnRemover = $('<i class="fa fa-remove pull-right btnRemover" onclick="removerSesion(this)"></i>')
            newDivSesion.find('.panel-title').append(btnRemover)
        }
        //Se agrega la nueva sesion al panel
        $('#divSesiones').append(newDivSesion)

        enumerar($('.divSesion'))
        prepararDatosJSON($('.divSesion'))
    }

    //Remueve un panel de sesion de la reservacion y ademas actualiza el estado de datos
    function removerSesion(btnRemover) {
        $(btnRemover).closest(".divSesion").remove()
        enumerar($('.divSesion'))
        prepararDatosJSON($('.divSesion'))
    }

    //Renumera las sesiones en su encabezado
    function enumerar(divsSesiones) {
        $.each(divsSesiones, function (idx, item) {
            $(item).find('#spanNum').html(idx + 1) //Se enumera la nueva sesion
        })
    }
    
    //Funcion que interpreta los datos del GUI en un arreglo JSON para ser enviado al server
    function prepararDatosJSON(divsSesiones) {
        sesiones = new Array()
        $.each(divsSesiones, function (idx, item) {
            sesiones.push(nuevoReg($(item)))
        })
        $('#listSesiones').val(JSON.stringify(sesiones))
        console.log(sesiones)
        checarConflictos()
    }

    //Verifica y ajusta las fechas de cada sesion para ser válidas
    function ajustarFechas(inputFecha) {
        //Se parsean las fechas introducidas dentro del panel modificado
        var divSesion = $(inputFecha).closest('.divSesion')
        var inputStartDate = divSesion.find('#sesion_periodoDeSesion_startDate');
        var inputEndDate = divSesion.find('#sesion_periodoDeSesion_endDate');
        var dtStartDate = strToDateTime(inputStartDate.val())
        var dtEndDate = strToDateTime(inputEndDate.val())
        //Si la fecha inicial es mayor a la final
        if(dtStartDate > dtEndDate ){
            dtEndDate = new Date(dtStartDate.getTime()) //Se iguala la inicial con la menor
            dtEndDate.setHours(dtEndDate.getHours() + 1);
            //Se modificar el datetimepicker de cada input
            strStartDate = dateTimeToDateTimePickerFormat(dtStartDate)
            strEndDate = dateTimeToDateTimePickerFormat(dtEndDate)
            inputStartDate.datetimepicker({ value: strStartDate })
            inputEndDate.datetimepicker({ value: strEndDate })
        }
    }

    //Crea un objeto JSON de sesion dado un panel GUI rellenado por el usuario
    function nuevoReg(divSesion) {
        var dato = {
            periodoDeSesion: {
                startDate: divSesion.find('#sesion_periodoDeSesion_startDate').val(),
                endDate: divSesion.find('#sesion_periodoDeSesion_endDate').val(),
            },
            salonID: divSesion.find('#salonID, #sesion_salonID').val()
        }
        return dato;
    }

    initPartialConflictos()

    function checarConflictos() {
        var token = $('#formReservacion').find("input[name=__RequestVerificationToken]").val()
        var reservacion = {
            reservacionID:@(Model.eventoID),
            sesiones: sesiones,
        };
        $.postJSON("/Reservacion/checarConflictos", reservacion, "json",
            function (res) {//Success
                console.log(res);
                $('#alertConflicto').slideDownOrUp(res.length)
                if (res.length) {
                    renderData(res);
                }
                enableAndNotify(res.length)
            }, function (error) {//Fail
                alert(error)
                console.log(error)
            }, function () {//Always

            }, token)
    }

    function enableAndNotify(doDisable) {
        $('#btnReservar').prop('disabled',doDisable)
    }

    function recalcularTotales() {
        var total = 0;
        $.each(elementosSeleccionados, function (idx, item) {
            total += item.costo * item.cantidad //Propiedad de costo es cambiable
        })
        calcularValoresPropiosDeImplementacion(total)
    }

    function calcularValoresPropiosDeImplementacion(total) {
        totalPorServicios = total;
        if (!loadingToEdit) { //No entra cuando recien carga y es edicion
            $("#totalPorServicios").val(numeral(totalPorServicios).format("0.00")).trigger("input")
            var costoPorReservacion = currencyToNumber($("#costoPorReservacion").val())
            var costoTotal = costoPorReservacion + totalPorServicios;
            $("#costoTotal").val(numberToCurrency(costoTotal))
            //$("#costo").attr('value', costoTotal)
            //Preparacion de forma para enviar datos seleccionados
            $('#listServiciosSeleccionados').val(JSON.stringify(elementosSeleccionados))
        }else
            loadingToEdit = false;

        //test/
        console.log($('#listServiciosSeleccionados').val())
    }
</script>
@*Si la forma esta en modo edicion o la forma fue regresada por el servidor debido a un error de validacion*@
@if(editMode || failPostBack) 
{
    <script>
        selectForEdition();
        $('#listSesiones').val(JSON.stringify(sesiones))
        $('#listServiciosSeleccionados').val(JSON.stringify(elementosSeleccionados))
    </script>
}
}